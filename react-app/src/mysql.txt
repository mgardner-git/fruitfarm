
drop database  if exists fruitfarm;

create database fruitfarm;
use fruitfarm;

#TODO Encryption?
create table user (
    username varchar(20) primary key not null,
    password varchar(20) not null,
    email varchar(30) not null,
    role varchar(20) not null
);


insert into user (username, password, role,email) values ('bob', 'bob123', 'inventoryManager', "bob@yahoo.com");
insert into user (username, password, role, email) values ('jill', 'jill123', 'customer', "jill@google.com");


create table location (
    id int not null primary key auto_increment,
    name varchar(20),
    latitude decimal(9,6),
    longitude decimal(9,6),
    address varchar(50)
);

#links to shipping addresses of customers AND locations of warehouses
create table address (
    id int not null primary key auto_increment,
    street1 varchar(30),
    street2 varchar(20),
    city varchar(20),
    state varchar(2),
    zip varchar(5), 
    locationId int,
    userId varchar(20),
    foreign key (locationId) references location(id),
    foreign key (userId) references user(username)
);


insert into location (name, latitude, longitude, address) values ('las vegas', 36.1716, -115.1391, "5525 w el parque las vegas, nv 89146");
insert into location (name, latitude, longitude, address) values ('Phoenix', 33.4484, -112.0740,  "1700 W Washington St, Phoenix, AZ, 85007");
insert into address (street1, city, state, zip, userId) values ("123 e st.", "las vegas", "nv", "12345", "jill");

#Base fruit type
create table produce (
    id int not null primary key auto_increment,
    name varchar(20),
    description TEXT
    
);
insert into produce (name, description) values ("fuji apples", "yummy crisp fuji apples");
insert into produce (name, description) values ("bananas", "yellow bananas");


#product at a location, including quantity available
create table inventory (
    id int not null primary key auto_increment,
    price decimal(10,2) not null,
    locationId int not null,
    produceId int not null,
    quantityAvailable int,
    foreign key (locationId) references location(id), 
    foreign key (produceId) references produce(id)
);

#fuji apples are on sale for $1 at las vegas
insert into inventory (price, locationId, produceId, quantityAvailable) values (1, 1, 1,4); 
insert into inventory (price, locationId, produceId, quantityAvailable) values (.89, 2, 2,10);


#each row documents how much of what a user has loaded to cart
create table cart (
    id int not null primary key auto_increment,
    quantity int not null,
    inventoryId int not null,
    username varchar(20),
    foreign key (inventoryid) references inventory(id),
    foreign key (username) references user(username)
);

insert into cart(quantity, inventoryId, username) values (2, 1, 'jill');
insert into cart(quantity, inventoryId, username) values (2,2, 'jill');

create table phonenumber (
    id int not null primary key auto_increment,
    number varchar (10),
    locationId int,
    userId varchar(20),
    foreign key (locationId) references location(id),
    foreign key (userId) references user(username)
);

create table  orders (    
    id int not null primary key auto_increment,
    userId varchar(20) not null,
    locationId int not null,    
    destination_address int not null,
    foreign key (destination_address) references address(id),
    foreign key (locationId) references location(id),
    foreign key (userId) references user(username)
);

#1. Approval
#2. Invoice
#3. Paid
#4. Fulfillment
#5. Shipped
#6. Received
#7. closed
#8. Rejected
create table order_status (
    id int not null primary key auto_increment,
    status int not null,
    orderId int not null,
    username varchar(20) not null,
    time datetime not null,
    foreign key (orderId) references orders(id),
    foreign key (username) references user(username)

);

create table lineItem (
    id int not null primary key auto_increment,
    orderId int not null,
    inventoryId int not null,
    price decimal(10,2) not null,
    quantity int not null,
    foreign key (orderId) references orders(id),
    foreign key (inventoryId) references inventory(id)
);